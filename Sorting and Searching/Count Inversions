class Solution {
  public:
  long long merge(int s, int m, int e, vector<int>&arr, vector<int>&temp){
      long long count=0;
      int i=s, j=m+1, k=s;
      while(i<=m && j<=e){
          if(arr[i]<=arr[j]){
              temp[k++]=arr[i++];
          }else{
              temp[k++]=arr[j++];
              count += (m-i+1);
          }
      }
      
      while(i<=m){
          temp[k++]=arr[i++];
      }
      while(j<=e){
          temp[k++]=arr[j++];
      }
      for(int i=s; i<=e; i++){
          arr[i]=temp[i];
      }
      return count;
  }
    // Function to count inversions in the array.
    long long mergeSort(int s, int e, vector<int>&arr, vector<int>&temp){
        if(s>=e) return 0;
        int m=(s+e)/2;
        int count = 0;
        count += mergeSort(s, m, arr, temp);
        count += mergeSort(m+1, e, arr, temp);
        count += merge(s, m, e, arr, temp);
        return count;
    }
    int inversionCount(vector<int> &arr) {
        // Your Code Here
        int n=arr.size();
        vector<int>temp(n);
        return mergeSort(0, n-1, arr, temp);
    }
};
